{"version":3,"sources":["Course.module.scss","App.module.scss","Course.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","course","cover","info","title","course-list","Course","_this$props","this","props","react_default","a","createElement","className","styles","alt","src","style","backgroundImage","concat","Component","App","state","courses","next","loading","onScroll","_this$state","_this","window","scrollY","innerHeight","document","body","scrollHeight","fetchData","url","setState","fetch","then","rs","json","data","Object","toConsumableArray","paginate","next_page_url","addEventListener","removeEventListener","map","src_Course","assign","key","id","Boolean","location","hostname","match","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2EACAA,EAAAC,QAAA,CAAkBC,OAAA,uBAAAC,MAAA,sBAAAC,KAAA,qBAAAC,MAAA,2CCAlBL,EAAAC,QAAA,CAAkBK,cAAA,2LCuBHC,mLApBF,IAAAC,EACoBC,KAAKC,MAAtBL,EADHG,EACGH,MAAOF,EADVK,EACUL,MACf,OACIQ,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOb,QACnBS,EAAAC,EAAAC,cAAA,OACIG,IAAI,aACJF,UAAWC,IAAOZ,MAClBc,IAAKd,EACLe,MAAO,CACHC,gBAAe,QAAAC,OAAUjB,EAAV,SAGvBQ,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOX,MACnBO,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOV,OAAQA,YAd9BgB,8BC8DNC,6MAzDXC,MAAQ,CACJC,QAAS,GACTC,KAAM,KACNC,SAAS,KAYbC,SAAW,WAAM,IAAAC,EACaC,EAAKN,MAAvBE,EADKG,EACLH,KADKG,EACCF,SAEVD,GAEAK,OAAOC,QAAUD,OAAOE,aACxBC,SAASC,KAAKC,aAAe,KAE7BN,EAAKO,UAAUX,MAIvBW,UAAY,SAACC,GACTR,EAAKS,SAAS,CACVZ,SAAS,IAGba,MAAMF,GACDG,KAAK,SAACC,GAAD,OAAQA,EAAGC,SAChBF,KAAK,SAACG,GACHd,EAAKS,SAAS,CACVZ,SAAS,EACTF,QAAO,GAAAJ,OAAAwB,OAAAC,EAAA,EAAAD,CAAMf,EAAKN,MAAMC,SAAjBoB,OAAAC,EAAA,EAAAD,CAA6BD,EAAKnB,UACzCC,KAAMkB,EAAKG,SAASC,sGA/BhCtC,KAAK2B,UAVT,gGAWIN,OAAOkB,iBAAiB,SAAUvC,KAAKkB,yDAIvCG,OAAOmB,oBAAoB,SAAUxC,KAAKkB,2CA+BrC,IACGH,EAAYf,KAAKc,MAAjBC,QACR,OACIb,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAO,gBAEfS,EAAQ0B,IAAI,SAAChD,GAAD,OACRS,EAAAC,EAAAC,cAACsC,EAADP,OAAAQ,OAAA,CAAQC,IAAKnD,EAAOoD,IAAQpD,cAlDlCmB,aCKEkC,QACW,cAA7BzB,OAAO0B,SAASC,UAEe,UAA7B3B,OAAO0B,SAASC,UAEhB3B,OAAO0B,SAASC,SAASC,MACvB,2DCbNC,iBAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAAS3B,SAAS4B,eAAe,SD4HlC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.40647560.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"course\":\"Course_course__1rxHr\",\"cover\":\"Course_cover__1QeYH\",\"info\":\"Course_info__I-9HF\",\"title\":\"Course_title__2sc-C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"course-list\":\"App_course-list__8hc4O\"};","import React, { Component } from 'react';\nimport styles from './Course.module.scss';\n\nclass Course extends Component {\n    render() {\n        const { title, cover } = this.props;\n        return (\n            <div className={styles.course}>\n                <img\n                    alt=\"course-img\"\n                    className={styles.cover}\n                    src={cover}\n                    style={{\n                        backgroundImage: `url('${cover}')`,\n                    }}\n                />\n                <div className={styles.info}>\n                    <div className={styles.title}>{title}</div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Course;","import React, { Component } from 'react';\nimport Course from './Course';\nimport styles from './App.module.scss';\n\nconst api =\n    'https://hiskio.com/api/v1/courses/professions?type=all&level=all&sort=latest&profession_id=1';\n\nclass App extends Component {\n    state = {\n        courses: [],\n        next: null,\n        loading: true,\n    }\n\n    componentDidMount() {\n        this.fetchData(api);\n        window.addEventListener('scroll', this.onScroll);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('scroll', this.onScroll);\n    }\n\n    onScroll = () => {\n        const { next, loading } = this.state;\n        if(loading) return;\n        if(!next) return;\n        if (\n            window.scrollY + window.innerHeight >=\n            document.body.scrollHeight - 100\n        ) {\n            this.fetchData(next);\n        }\n    }\n\n    fetchData = (url) => {\n        this.setState({\n            loading: true,\n        })\n\n        fetch(url)\n            .then((rs) => rs.json())\n            .then((data) => {\n                this.setState({\n                    loading: false,\n                    courses: [...this.state.courses, ...data.courses],\n                    next: data.paginate.next_page_url,\n                });\n            });\n    }\n\n    render() {\n        const { courses } = this.state;\n        return (\n            <div className={styles['course-list']}>\n                {\n                    courses.map((course) => (\n                        <Course key={course.id} {...course} />\n                    ))\n                }\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport {render} from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nrender(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}